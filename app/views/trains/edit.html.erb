<% provide(:title, "Edit train") %>
<div class="center-container">
  <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
    <li id="carriage-pill-tab" class="nav-item" role="presentation" style="float: none;">
      <button class="nav-link active" id="pills-carriages-tab" data-bs-toggle="pill" data-bs-target="#pills-carriages" type="button" role="tab" aria-controls="pills-carriages" aria-selected="true">Edit carriages</button>
    </li>
    <li id="route-pill-tab" class="nav-item" role="presentation" style="float: none;">
      <button class="nav-link" id="pills-route-tab" data-bs-toggle="pill" data-bs-target="#pills-route" type="button" role="tab" aria-controls="pills-route" aria-selected="false">Edit route</button>
    </li>
    <% unless @train.route.nil? %>
        <li id="stop-pill-tab" class="nav-item" role="presentation" style="float: none;">
          <button class="nav-link" id="pills-stops-tab" data-bs-toggle="pill" data-bs-target="#pills-stops" type="button" role="tab" aria-controls="pills-stops" aria-selected="false">Edit stops</button>
        </li>
    <% end %>
  </ul>
  <div class="tab-content" id="pills-tabContent">
        <div id="pills-carriages" class="tab-pane fade show active" style="margin-top: 30px">
          <ul id="train-carriages-list" style="list-style: none" >
            <% @train.carriages.each do |carriage| %>
              <li id="carriage-<%=carriage.id%>">
                <i class='bi bi-circle-fill blue'></i>
                <a href='<%= edit_carriage_path(carriage.id) %>' style="text-decoration: none"><%= carriage.name %></a></li>
            <% end %>
          </ul>

          <div class="add-station-container" style="margin-top: 2px" data-bs-toggle="modal" data-bs-target="#add_carriage_modal">
            <button class="btn btn-link">
              <span><i class="bi bi-plus-circle"></i></span>
            </button>
            Add new carriage
          </div>
        </div>
        <div id="pills-route" class="tab-pane fade">
          <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#pick_route_modal">Pick route</button>
        </div>
    <% unless @train.route.nil? %>
        <div id="pills-stops" class="tab-pane fade">
            <ul class="train-stops-ul">
              <% if @train.stops.count == 0 %>
                <% @train.route.stations.each do |station| %>
                  <%= render partial: 'trains/partials/station', locals: { station: station} %>
                <% end %>
              <% else %>
                <% @train.stops.each do |stop| %>
                  <%= render partial: 'trains/partials/stop', locals: { stop: stop} %>
                <% end %>
              <% end %>
            </ul>
            <button class="btn btn-success" onclick="validate()">Update</button>
        </div>
    <% end %>
  </div>
</div>

<%= render partial: 'trains/partials/carriage_pick_modal', :locals => { :carriages => @carriages} %>
<%= render partial: 'trains/partials/route_pick_modal', :locals => { :routes => @routes} %>

<script>
    const stops = []
    let newCarriage=""
    let carriageOffsetIndex="carriage-".length
    var route = ""

    window.onload = function()
    {
        let query = document.querySelector("#train-carriages-list")
        if (query !== null)
        {
            let lastListItem = document.querySelector("#train-carriages-list").lastElementChild
            lastListItem.innerHTML += '<button id="carriage_remove_button" '
              + 'class="btn" '
              + 'style="font-size: 12px; color: red; margin-left: 20px" '
              + 'value="' + lastListItem.id.substring(carriageOffsetIndex) + '" onClick=removeCarriage(event)>'
              + '<i class="bi bi-x-circle"></i></button>'
        }
    }

    function inputKeyUp(input)
    {
        var filter, ul, li, a, i, txtValue;
        filter = input.value.toUpperCase();
        ul = document.getElementById("carriage-ul");
        li = ul.getElementsByTagName('li');

        // Loop through all list items, and hide those who don't match the search query
        for (i = 0; i < li.length; i++) {
            a = li[i].getElementsByTagName("a")[0];
            txtValue = a.textContent || a.innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                li[i].style.display = "";
            } else {
                li[i].style.display = "none";
            }
        }
    }

    function inputKeyUpRoute(input)
    {

    }

    function accClick(event)
    {
        if (event.target.tagName === 'BUTTON')
        {
            let targetId = event.target.dataset.bsTarget.substring('#route-'.length)
            if (targetId === route)
                route = ""
            else
                route = targetId
        }
        console.log(route)
    }

    function addRoute()
    {
        if (route !== "")
        {
            $.ajax({
                method: 'PATCH',
                url: '/trains/' + <%= @train.id %>,
                data: {
                    "authenticity_token" : "<%= form_authenticity_token %>",
                    train: { route_id: route }
                }
            })
        }
    }

    function carriageClick(id)
    {
        const value = id.substring(carriageOffsetIndex)
        const carriage = document.getElementById(id)
        if (newCarriage === "")
        {
            paintListItem(carriage, 'cornflowerBlue', 'white', 'true')
            newCarriage = value;
        }
        else
        {
            if(carriage.dataset.chosen === 'true')
            {
                paintListItem(carriage, '#eee', 'black', 'false')
                newCarriage = "";
            }
            else
            {
                const prevCarriage = document.getElementById('carriage-' + newCarriage);
                paintListItem(prevCarriage, '#eee', 'black', 'false')
                paintListItem(carriage, 'cornflowerBlue', 'white', 'true')
                newCarriage = value;
            }
        }
        console.log(newCarriage)
    }

    function paintListItem(item, bgColor, color, choose)
    {
        item.style.backgroundColor = bgColor;
        item.style.color = color;
        item.dataset.chosen = choose;
    }

    function removeCarriage(event)
    {
        let to_remove = event.target.tagName === 'I' ? event.target.parentNode.value : event.target.value
        $.ajax(
          {
              method: 'PATCH',
              url: '/carriages/' + to_remove,
              data: {"authenticity_token": "<%= form_authenticity_token %>",
                  "train_id": "<%=@train.id %>",
                  carriage: {train_id: "", order_number: "" }}
          }
        )
    }

    function addCarriage()
    {
        if (newCarriage !== "")
        {
            let next_order_number = document.querySelector('#train-carriages-list').childElementCount
            $.ajax
            (
              {
                  method: 'PATCH',
                  url: '/carriages/' + newCarriage,
                  data: {
                      "authenticity_token": "<%= form_authenticity_token %>",
                      "train_id": "<%=@train.id %>" ,
                      carriage: {train_id: <%=@train.id %>, order_number: next_order_number+1}
                  }
              }
            )
        }
    }

    function validate()
    {
        let list = document.querySelectorAll('.train-stops-ul > li')
        var isValid = true
        var lastValidInput
        console.log(list)
        list.forEach((li) =>
        {
            li.querySelector('i').style.color = "#0b5ed7"
            let id = li.id.substring('station-'.length)
            let arrInput = li.querySelector('#stop-arr-'+id)
            let depInput = li.querySelector('#stop-dep-'+id)
            if (arrInput.value!== "" && depInput.value !== "")
            {
                if( lastValidInput !== undefined && Date.parse(arrInput.value)<Date.parse(lastValidInput.value))
                {
                    li.querySelector('i').style.color = "red"
                    isValid=false
                    return
                }
                if (validateInput(arrInput) && validateInput(depInput))
                {
                    if (validateInputs(arrInput, depInput))
                    {
                        lastValidInput = depInput
                        stops.push({station_id: li.id.substring('station-'.length),
                            arrival_time: arrInput.value,
                            departure_time: depInput.value})
                        paintDiv(li.querySelector('.stop-station-inputs'), "#0d6efd")
                    }
                    else
                    {
                        paintDiv(li.querySelector('.stop-station-inputs'), "red")
                        isValid = false
                    }
                }
                else
                {
                    isValid = false
                }
            }
            else
            {
                paintBorder(arrInput, "red")
                paintBorder(depInput, "red")
                isValid = false
            }
            console.log(li)
            if (lastValidInput!== undefined)
                console.log(lastValidInput)
        })
        console.log(stops)
        console.log(isValid)
        if (!isValid)
            stops.length = 0
        else
            updateStops(stops)
    }

    function validateInput(input)
    {
        if(Date.parse(input.value) < Date.now())
        {
            paintBorder(input, 'red')
            return false
        }
        clearBorder(input)
        return true
    }

    function validateInputs(inputArr, inputDep)
    {
        return Date.parse(inputArr.value) <= Date.parse(inputDep.value);
    }

    function paintBorder(item, color)
    {
        item.style.borderBottom = "1px solid "+ color;
    }

    function paintDiv(div, color)
    {
        div.style.borderLeft = "3px solid " + color
    }

    function clearBorder(item)
    {
        item.style.border = "none";
    }

    function updateStops(stops)
    {
        $.ajax(
          {
              method: 'PATCH',
              url: '/trains/' + <%= @train.id %>,
              data: {"authenticity_token": "<%= form_authenticity_token %>", train: { stops: stops } }
          }

        )
    }
</script>